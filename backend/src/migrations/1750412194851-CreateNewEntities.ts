import { MigrationInterface, QueryRunner } from "typeorm";

export class CreateNewEntities1750412194851 implements MigrationInterface {
    name = 'CreateNewEntities1750412194851'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "EVENT_LOGS" ("id" number GENERATED BY DEFAULT AS IDENTITY, "eventType" varchar2(50) NOT NULL, "level" varchar2(20) DEFAULT 'info' NOT NULL, "action" varchar2(255) NOT NULL, "description" clob, "userId" varchar2(100), "ipAddress" varchar2(45), "userAgent" varchar2(500), "httpMethod" varchar2(10), "endpoint" varchar2(500), "statusCode" number, "responseTime" number, "requestBody" clob, "responseBody" clob, "errorDetails" clob, "sessionId" varchar2(100), "correlationId" varchar2(100), "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, CONSTRAINT "PK_e38805f42a459d268c06d19f1a3" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_3f98327985d3591e446f3e12ed" ON "EVENT_LOGS" ("level", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_64d0e414845b6b1b621cd22bf7" ON "EVENT_LOGS" ("ipAddress", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_4fb537080ae620e2cdfff81870" ON "EVENT_LOGS" ("userId", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_edee2f0f67619856ecd2577ff5" ON "EVENT_LOGS" ("eventType", "createdAt")`);
        await queryRunner.query(`CREATE TABLE "SENTRY_ERRORS" ("id" number GENERATED BY DEFAULT AS IDENTITY, "errorType" varchar2(100) NOT NULL, "errorMessage" varchar2(500) NOT NULL, "stackTrace" clob, "severity" varchar2(20) DEFAULT 'medium' NOT NULL, "status" varchar2(20) DEFAULT 'new' NOT NULL, "userId" varchar2(100), "ipAddress" varchar2(45), "userAgent" varchar2(500), "httpMethod" varchar2(10), "endpoint" varchar2(500), "statusCode" number, "requestBody" clob, "responseBody" clob, "sessionId" varchar2(100), "correlationId" varchar2(100), "sentryEventId" varchar2(100), "occurrenceCount" number DEFAULT 1 NOT NULL, "firstOccurrence" date, "lastOccurrence" date, "additionalContext" clob, "assignedTo" varchar2(100), "resolutionNotes" clob, "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, CONSTRAINT "PK_de10928368c68d3878ee3917fee" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_937c8293d5698ac476fe01e0dc" ON "SENTRY_ERRORS" ("userId", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_f4df8754970d76adc6e0a477a0" ON "SENTRY_ERRORS" ("errorType", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_71fe75862a647bf391ce6cd20d" ON "SENTRY_ERRORS" ("status", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_02cc8b496e0e02bce3bd6638d1" ON "SENTRY_ERRORS" ("severity", "createdAt")`);
        await queryRunner.query(`CREATE TABLE "BACKUP_LOGS" ("id" number GENERATED BY DEFAULT AS IDENTITY, "backupType" varchar2(20) NOT NULL, "status" varchar2(20) DEFAULT 'pending' NOT NULL, "backupDate" date NOT NULL, "filePath" varchar2(500), "fileSize" number, "checksum" varchar2(100), "initiatedBy" varchar2(100), "startedAt" date, "completedAt" date, "duration" number, "description" clob, "errorDetails" clob, "tablesCount" number, "recordsCount" number, "compressionType" varchar2(100), "storageLocation" varchar2(500), "retentionPolicy" varchar2(100), "expiresAt" date, "backupVersion" varchar2(100), "additionalMetadata" clob, "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, CONSTRAINT "PK_7724117c7de7feab58b3a2fd740" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_bcbf7e0000b27a229f5d160fae" ON "BACKUP_LOGS" ("backupDate", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_cb9e8b33f6ad2ba855125d69a5" ON "BACKUP_LOGS" ("status", "createdAt")`);
        await queryRunner.query(`CREATE INDEX "IDX_43e3d71c10bff62e42287509e8" ON "BACKUP_LOGS" ("backupType", "createdAt")`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP INDEX "IDX_43e3d71c10bff62e42287509e8"`);
        await queryRunner.query(`DROP INDEX "IDX_cb9e8b33f6ad2ba855125d69a5"`);
        await queryRunner.query(`DROP INDEX "IDX_bcbf7e0000b27a229f5d160fae"`);
        await queryRunner.query(`DROP TABLE "BACKUP_LOGS"`);
        await queryRunner.query(`DROP INDEX "IDX_02cc8b496e0e02bce3bd6638d1"`);
        await queryRunner.query(`DROP INDEX "IDX_71fe75862a647bf391ce6cd20d"`);
        await queryRunner.query(`DROP INDEX "IDX_f4df8754970d76adc6e0a477a0"`);
        await queryRunner.query(`DROP INDEX "IDX_937c8293d5698ac476fe01e0dc"`);
        await queryRunner.query(`DROP TABLE "SENTRY_ERRORS"`);
        await queryRunner.query(`DROP INDEX "IDX_edee2f0f67619856ecd2577ff5"`);
        await queryRunner.query(`DROP INDEX "IDX_4fb537080ae620e2cdfff81870"`);
        await queryRunner.query(`DROP INDEX "IDX_64d0e414845b6b1b621cd22bf7"`);
        await queryRunner.query(`DROP INDEX "IDX_3f98327985d3591e446f3e12ed"`);
        await queryRunner.query(`DROP TABLE "EVENT_LOGS"`);
    }

}
