-- SQL Commands for Table Creation
-- Order: Based on entity relationships and foreign key dependencies

-- 1. Create USERS table (no foreign key dependencies)
CREATE TABLE USERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE INDEX IDX_USERS_EMAIL ON USERS(EMAIL);

-- 2. Create QUOTES table (depends on USERS)
CREATE TABLE QUOTES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    QUOTENUMBER VARCHAR2(255) NOT NULL UNIQUE,
    EMAIL VARCHAR2(255) NOT NULL,
    COVERAGELEVEL NUMBER NULL,
    LIABILITYCOVERAGE VARCHAR2(255) NULL,
    LIQUORLIABILITY NUMBER(1) DEFAULT 0 NULL,
    COVIDDISCLOSURE NUMBER(1) NULL,
    SPECIALACTIVITIES NUMBER(1) NULL,
    TOTALPREMIUM FLOAT NULL,
    BASEPREMIUM FLOAT NULL,
    LIABILITYPREMIUM FLOAT NULL,
    LIQUORLIABILITYPREMIUM FLOAT NULL,
    STATUS VARCHAR2(20) DEFAULT 'STEP1' NOT NULL,
    SOURCE VARCHAR2(20) DEFAULT 'CUSTOMER' NOT NULL,
    ISCUSTOMERGENERATED NUMBER(1) DEFAULT 0 NOT NULL,
    CONVERTEDTOPOLICY NUMBER(1) DEFAULT 0 NOT NULL,
    EMAILSENT NUMBER(1) DEFAULT 0 NOT NULL,
    EMAILSENTAT TIMESTAMP NULL,
    RESIDENTSTATE VARCHAR2(255) NULL,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USERID NUMBER NOT NULL,
    CONSTRAINT FK_QUOTES_USER FOREIGN KEY (USERID) REFERENCES USERS(ID)
);

CREATE INDEX IDX_QUOTES_USERID ON QUOTES(USERID);
CREATE INDEX IDX_QUOTES_STATUS ON QUOTES(STATUS);
CREATE INDEX IDX_QUOTES_SOURCE ON QUOTES(SOURCE);
CREATE INDEX IDX_QUOTES_CONVERTEDTOPOLICY ON QUOTES(CONVERTEDTOPOLICY);

-- 3. Create EVENTS table (depends on QUOTES)
CREATE TABLE EVENTS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EVENTTYPE VARCHAR2(255) NOT NULL,
    EVENTDATE TIMESTAMP NOT NULL,
    MAXGUESTS VARCHAR2(255) NOT NULL,
    HONOREE1FIRSTNAME VARCHAR2(255) NULL,
    HONOREE1LASTNAME VARCHAR2(255) NULL,
    HONOREE2FIRSTNAME VARCHAR2(255) NULL,
    HONOREE2LASTNAME VARCHAR2(255) NULL,
    QUOTEID NUMBER UNIQUE NULL,
    POLICYID NUMBER UNIQUE NULL,
    CONSTRAINT FK_EVENTS_QUOTE FOREIGN KEY (QUOTEID) REFERENCES QUOTES(ID)
);

-- 4. Create POLICIES table (depends on QUOTES)
CREATE TABLE POLICIES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    POLICYNUMBER VARCHAR2(255) NOT NULL UNIQUE,
    PDFURL VARCHAR2(255) NULL,
    EMAILSENT NUMBER(1) DEFAULT 0 NOT NULL,
    EMAILSENTAT TIMESTAMP NULL,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    QUOTEID NUMBER UNIQUE NULL,
    CONSTRAINT FK_POLICIES_QUOTE FOREIGN KEY (QUOTEID) REFERENCES QUOTES(ID)
);

-- 5. Create POLICY_HOLDERS table (depends on QUOTES and POLICIES)
CREATE TABLE POLICY_HOLDERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR2(255) NOT NULL,
    LASTNAME VARCHAR2(255) NOT NULL,
    PHONE VARCHAR2(255) NOT NULL,
    RELATIONSHIP VARCHAR2(255) NULL,
    HEARABOUTUS VARCHAR2(255) NULL,
    ADDRESS VARCHAR2(255) NOT NULL,
    COUNTRY VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STATE VARCHAR2(255) NULL,
    ZIP VARCHAR2(255) NULL,
    LEGALNOTICES NUMBER(1) NULL,
    COMPLETINGFORMNAME VARCHAR2(255) NULL,
    QUOTEID NUMBER UNIQUE NULL,
    POLICYID NUMBER UNIQUE NULL,
    CONSTRAINT FK_POLICY_HOLDERS_QUOTE FOREIGN KEY (QUOTEID) REFERENCES QUOTES(ID),
    CONSTRAINT FK_POLICY_HOLDERS_POLICY FOREIGN KEY (POLICYID) REFERENCES POLICIES(ID)
);

-- 6. Create VENUES table (depends on EVENTS)
CREATE TABLE VENUES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    ADDRESS1 VARCHAR2(255) NOT NULL,
    ADDRESS2 VARCHAR2(255) NULL,
    COUNTRY VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STATE VARCHAR2(255) NULL,
    ZIP VARCHAR2(255) NULL,
    LOCATIONTYPE VARCHAR2(255) NULL,
    CEREMONYLOCATIONTYPE VARCHAR2(255) NULL,
    INDOOROUTDOOR VARCHAR2(255) NULL,
    VENUEASINSURED NUMBER(1) DEFAULT 0 NOT NULL,
    RECEPTIONLOCATIONTYPE VARCHAR2(255) NULL,
    RECEPTIONINDOOROUTDOOR VARCHAR2(255) NULL,
    RECEPTIONVENUENAME VARCHAR2(255) NULL,
    RECEPTIONVENUEADDRESS1 VARCHAR2(255) NULL,
    RECEPTIONVENUEADDRESS2 VARCHAR2(255) NULL,
    RECEPTIONVENUECOUNTRY VARCHAR2(255) NULL,
    RECEPTIONVENUECITY VARCHAR2(255) NULL,
    RECEPTIONVENUESTATE VARCHAR2(255) NULL,
    RECEPTIONVENUEZIP VARCHAR2(255) NULL,
    RECEPTIONVENUEASINSURED NUMBER(1) DEFAULT 0 NULL,
    BRUNCHLOCATIONTYPE VARCHAR2(255) NULL,
    BRUNCHINDOOROUTDOOR VARCHAR2(255) NULL,
    BRUNCHVENUENAME VARCHAR2(255) NULL,
    BRUNCHVENUEADDRESS1 VARCHAR2(255) NULL,
    BRUNCHVENUEADDRESS2 VARCHAR2(255) NULL,
    BRUNCHVENUECOUNTRY VARCHAR2(255) NULL,
    BRUNCHVENUECITY VARCHAR2(255) NULL,
    BRUNCHVENUESTATE VARCHAR2(255) NULL,
    BRUNCHVENUEZIP VARCHAR2(255) NULL,
    BRUNCHVENUEASINSURED NUMBER(1) DEFAULT 0 NULL,
    REHEARSALLOCATIONTYPE VARCHAR2(255) NULL,
    REHEARSALINDOOROUTDOOR VARCHAR2(255) NULL,
    REHEARSALVENUENAME VARCHAR2(255) NULL,
    REHEARSALVENUEADDRESS1 VARCHAR2(255) NULL,
    REHEARSALVENUEADDRESS2 VARCHAR2(255) NULL,
    REHEARSALVENUECOUNTRY VARCHAR2(255) NULL,
    REHEARSALVENUECITY VARCHAR2(255) NULL,
    REHEARSALVENUESTATE VARCHAR2(255) NULL,
    REHEARSALVENUEZIP VARCHAR2(255) NULL,
    REHEARSALVENUEASINSURED NUMBER(1) DEFAULT 0 NULL,
    REHEARSALDINNERVENUENAME VARCHAR2(255) NULL,
    REHEARSALDINNERVENUEADDRESS1 VARCHAR2(255) NULL,
    REHEARSALDINNERVENUEADDRESS2 VARCHAR2(255) NULL,
    REHEARSALDINNERVENUECOUNTRY VARCHAR2(255) NULL,
    REHEARSALDINNERVENUECITY VARCHAR2(255) NULL,
    REHEARSALDINNERVENUESTATE VARCHAR2(255) NULL,
    REHEARSALDINNERVENUEZIP VARCHAR2(255) NULL,
    REHEARSALDINNERVENUEASINSURED NUMBER(1) DEFAULT 0 NULL,
    REHEARSALDINNERLOCATIONTYPE VARCHAR2(255) NULL,
    REHEARSALDINNERINDOOROUTDOOR VARCHAR2(255) NULL,
    EVENTID NUMBER NOT NULL UNIQUE,
    CONSTRAINT FK_VENUES_EVENT FOREIGN KEY (EVENTID) REFERENCES EVENTS(ID)
);

-- 7. Create PAYMENTS table (depends on QUOTES and POLICIES)
CREATE TABLE PAYMENTS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AMOUNT NUMBER(10,2) NOT NULL,
    STATUS VARCHAR2(50) NOT NULL,
    METHOD VARCHAR2(50) NOT NULL,
    REFERENCE VARCHAR2(100) NULL,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    QUOTEID NUMBER NULL,
    POLICYID NUMBER NULL,
    CONSTRAINT FK_PAYMENTS_QUOTE FOREIGN KEY (QUOTEID) REFERENCES QUOTES(ID),
    CONSTRAINT FK_PAYMENTS_POLICY FOREIGN KEY (POLICYID) REFERENCES POLICIES(ID)
);

CREATE INDEX IDX_PAYMENTS_QUOTEID ON PAYMENTS(QUOTEID);
CREATE INDEX IDX_PAYMENTS_STATUS ON PAYMENTS(STATUS);

-- 8. Create POLICY_VERSIONS table (depends on POLICIES)
CREATE TABLE POLICY_VERSIONS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DATA CLOB NOT NULL,
    CREATEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    POLICYID NUMBER NOT NULL,
    CONSTRAINT FK_POLICY_VERSIONS_POLICY FOREIGN KEY (POLICYID) REFERENCES POLICIES(ID) ON DELETE CASCADE
);

CREATE INDEX IDX_POLICY_VERSIONS_POLICYID ON POLICY_VERSIONS(POLICYID);

-- Add remaining foreign key constraints after all tables are created
ALTER TABLE EVENTS ADD CONSTRAINT FK_EVENTS_POLICY FOREIGN KEY (POLICYID) REFERENCES POLICIES(ID); 








-- new tables
-- Create EVENT_LOGS table with nullable fields
CREATE TABLE "EVENT_LOGS" (
    "id" number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "eventType" varchar2(50) NOT NULL,
    "level" varchar2(20) DEFAULT 'info' NOT NULL,
    "action" varchar2(255) NOT NULL,
    "description" clob NULL,
    "userId" varchar2(100) NULL,
    "ipAddress" varchar2(45) NULL,
    "userAgent" varchar2(500) NULL,
    "httpMethod" varchar2(10) NULL,
    "endpoint" varchar2(500) NULL,
    "statusCode" number NULL,
    "responseTime" number NULL,
    "requestBody" clob NULL,
    "responseBody" clob NULL,
    "errorDetails" clob NULL,
    "sessionId" varchar2(100) NULL,
    "correlationId" varchar2(100) NULL,
    "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create indexes for EVENT_LOGS
CREATE INDEX "IDX_EVENT_LOGS_EVENTTYPE_CREATEDAT" ON "EVENT_LOGS" ("eventType", "createdAt");
CREATE INDEX "IDX_EVENT_LOGS_USERID_CREATEDAT" ON "EVENT_LOGS" ("userId", "createdAt");
CREATE INDEX "IDX_EVENT_LOGS_IPADDRESS_CREATEDAT" ON "EVENT_LOGS" ("ipAddress", "createdAt");
CREATE INDEX "IDX_EVENT_LOGS_LEVEL_CREATEDAT" ON "EVENT_LOGS" ("level", "createdAt");

-- Create SENTRY_ERRORS table with nullable fields
CREATE TABLE "SENTRY_ERRORS" (
    "id" number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "errorType" varchar2(100) NOT NULL,
    "errorMessage" varchar2(500) NOT NULL,
    "stackTrace" clob NULL,
    "severity" varchar2(20) DEFAULT 'medium' NOT NULL,
    "status" varchar2(20) DEFAULT 'new' NOT NULL,
    "userId" varchar2(100) NULL,
    "ipAddress" varchar2(45) NULL,
    "userAgent" varchar2(500) NULL,
    "httpMethod" varchar2(10) NULL,
    "endpoint" varchar2(500) NULL,
    "statusCode" number NULL,
    "requestBody" clob NULL,
    "responseBody" clob NULL,
    "sessionId" varchar2(100) NULL,
    "correlationId" varchar2(100) NULL,
    "sentryEventId" varchar2(100) NULL,
    "occurrenceCount" number DEFAULT 1 NOT NULL,
    "firstOccurrence" date NULL,
    "lastOccurrence" date NULL,
    "additionalContext" clob NULL,
    "assignedTo" varchar2(100) NULL,
    "resolutionNotes" clob NULL,
    "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create indexes for SENTRY_ERRORS
CREATE INDEX "IDX_SENTRY_ERRORS_SEVERITY_CREATEDAT" ON "SENTRY_ERRORS" ("severity", "createdAt");
CREATE INDEX "IDX_SENTRY_ERRORS_STATUS_CREATEDAT" ON "SENTRY_ERRORS" ("status", "createdAt");
CREATE INDEX "IDX_SENTRY_ERRORS_ERRORTYPE_CREATEDAT" ON "SENTRY_ERRORS" ("errorType", "createdAt");
CREATE INDEX "IDX_SENTRY_ERRORS_USERID_CREATEDAT" ON "SENTRY_ERRORS" ("userId", "createdAt");

-- Create BACKUP_LOGS table with nullable fields
CREATE TABLE "BACKUP_LOGS" (
    "id" number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "backupType" varchar2(20) NOT NULL,
    "status" varchar2(20) DEFAULT 'pending' NOT NULL,
    "backupDate" date NOT NULL,
    "filePath" varchar2(500) NULL,
    "fileSize" number NULL,
    "checksum" varchar2(100) NULL,
    "initiatedBy" varchar2(100) NULL,
    "startedAt" date NULL,
    "completedAt" date NULL,
    "duration" number NULL,
    "description" clob NULL,
    "errorDetails" clob NULL,
    "tablesCount" number NULL,
    "recordsCount" number NULL,
    "compressionType" varchar2(100) NULL,
    "storageLocation" varchar2(500) NULL,
    "retentionPolicy" varchar2(100) NULL,
    "expiresAt" date NULL,
    "backupVersion" varchar2(100) NULL,
    "additionalMetadata" clob NULL,
    "createdAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create indexes for BACKUP_LOGS
CREATE INDEX "IDX_BACKUP_LOGS_BACKUPTYPE_CREATEDAT" ON "BACKUP_LOGS" ("backupType", "createdAt");
CREATE INDEX "IDX_BACKUP_LOGS_STATUS_CREATEDAT" ON "BACKUP_LOGS" ("status", "createdAt");
CREATE INDEX "IDX_BACKUP_LOGS_BACKUPDATE_CREATEDAT" ON "BACKUP_LOGS" ("backupDate", "createdAt");











-- See all email-related events
SELECT 
    "id",
    "action",
    "description",
    "level",
    "createdAt",
    "errorDetails"
FROM "EVENT_LOGS" 
WHERE "action" LIKE '%email%' 
   OR "action" LIKE '%Error report%'
   OR "description" LIKE '%email%'
ORDER BY "createdAt" DESC;

-- See successful email sends
SELECT 
    "id",
    "action",
    "description",
    "createdAt"
FROM "EVENT_LOGS" 
WHERE "action" = 'Error report sent'
   OR "action" LIKE '%email sent%'
ORDER BY "createdAt" DESC;

-- See failed email attempts
SELECT 
    "id",
    "action",
    "description",
    "errorDetails",
    "createdAt"
FROM "EVENT_LOGS" 
WHERE "action" = 'Error report failed'
   OR "level" = 'ERROR'
   OR "errorDetails" IS NOT NULL
ORDER BY "createdAt" DESC;


-- check recent email activity in the last 24 hours
SELECT 
    "id",
    "action",
    "description",
    "level",
    "createdAt"
FROM "EVENT_LOGS" 
WHERE "createdAt" >= SYSDATE - 1
  AND ("action" LIKE '%email%' OR "action" LIKE '%Error report%')
ORDER BY "createdAt" DESC;
